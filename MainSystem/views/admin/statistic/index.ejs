<div class="grid grid-cols-2 p-2 gap-4">
  <div id="chart1" class="col-span-1 bg-white rounded-lg shadow dark:bg-gray-800">
    <div class="flex justify-between p-4 md:p-6 pb-0 md:pb-0">
      <div>
        <h5 id="totalRevenue" class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2"></h5>
        <p class="text-base font-normal text-gray-500 dark:text-gray-400">Doanh thu tuần này</p>
      </div>

    </div>
    <div id="labels-chart" class="px-2.5"></div>

  </div>

  <div id="chart2" class="col-span-1 bg-white rounded-lg shadow dark:bg-gray-800">
    <div class="flex justify-between p-4 md:p-6 pb-0 md:pb-0">
      <div>
        <h5 id="totalRevenue" class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2"></h5>
        <p class="text-base font-normal text-gray-500 dark:text-gray-400">Doanh thu tháng này</p>
      </div>

    </div>
    <div id="labels-chart" class="px-2.5"></div>

  </div>


  <div id="chart3" class="col-span-1 bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">

    <div class="flex justify-between items-start w-full">
      <div class="flex-col items-center">
        <div class="flex items-center mb-1">
          <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white me-1">Phần trăm top 5 sản phẩm bán chạy trong tuần</h5>
          <div data-popover id="chart-info" role="tooltip"
            class="absolute z-10 invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
            <div class="p-3 space-y-2">

            </div>
            <div data-popper-arrow></div>
          </div>
        </div>

        <div id="dateRangeDropdown"
          class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-80 lg:w-96 dark:bg-gray-700 dark:divide-gray-600">

        </div>
      </div>
      <div class="flex justify-end items-center">

        <div id="widgetDropdown"
          class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">

        </div>
      </div>
    </div>

    <!-- Line Chart -->
    <div class="py-6" id="pie-chart"></div>
  </div>

  <div id="chart4" class="col-span-1 bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">

    <div class="flex justify-between items-start w-full">
      <div class="flex-col items-center">
        <div class="flex items-center mb-1">
          <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white me-1">Phần trăm top 5 sản phẩm bán chạy trong tháng</h5>
          <div data-popover id="chart-info" role="tooltip"
            class="absolute z-10 invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
            <div class="p-3 space-y-2">

            </div>
            <div data-popper-arrow></div>
          </div>
        </div>

        <div id="dateRangeDropdown"
          class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-80 lg:w-96 dark:bg-gray-700 dark:divide-gray-600">

        </div>
      </div>
      <div class="flex justify-end items-center">

        <div id="widgetDropdown"
          class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">

        </div>
      </div>
    </div>

    <!-- Line Chart -->
    <div class="py-6" id="pie-chart"></div>
  </div>
</div>

</div>





<script>
  const formatDate = (date) => {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  };

  function areDatesEqual(date1, date2) {
    return (
      date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate()
    );
  }


  (async function () {

    await renderLineChart(7, "chart1");
    await renderLineChart(30, "chart2");
    await renderPieChart(7, "chart3");
    await renderPieChart(7, "chart4");
  })();

  async function renderPieChart(duration, chartId) {
    const chart = document.getElementById(chartId);
    let orderDetails = (await GetData('/admin/statistic/getOrderDetails')).data;
    let orders = (await GetData('/admin/statistic/getOrders')).data;
    let products = (await GetData('/admin/statistic/getProducts')).data;
    const curDate = new Date();
    const dateInThePass = new Date(curDate);
    dateInThePass.setDate(curDate.getDate() - duration);

    orders = orders.map(x => {
      const orderDate = new Date(x.orderDate);
      orderDate.setHours(orderDate.getHours() + 7);
      x.orderDate = orderDate;
      return x;
    })
      .filter(x => {
        return x.orderDate < curDate && x.orderDate > dateInThePass;
      }).sort((a, b) => a.orderDate - b.orderDate);


      orderDetails = orderDetails.filter(x => {
        let flag = false;
        for (let i = 0; i < orders.length; i++) {
          if (orders[i].id == x.orderId) {
            flag = true;
            break;
          }
          
        }
        return flag;
      });

      const totalQuantity = orderDetails.reduce((total, x) => total += parseInt(x.quantity), 0);

      const groupedData = orderDetails.reduce((result, current) => {
          const key = current.productId;
          if (!result[key]) {
              result[key] = { productId: key, totalQuantity: 0 };
          }
          result[key].totalQuantity += current.quantity;
          return result;
      }, {});
      let resultArray = Object.values(groupedData);
      resultArray = resultArray.map(x => {
        let productName = '';
        for (let i = 0; i < products.length; i++) {
          if (x.productId == products[i].id) {
            productName = products[i].title;
            break;
          }
        }
        return { productName: productName, quantity: x.totalQuantity };
      }).sort((a, b) => b.quantity - a.quantity).slice(0, 5);

      const productNameList = resultArray.map(x => x.productName);
      const productQuantityList = resultArray.map(x => x.quantity);
    
      productNameList.push('Khác');
      productQuantityList.push(totalQuantity - productQuantityList.reduce((tol, x) => tol += x), 0);
      const productQuantityPercent = productQuantityList.map(x => x / totalQuantity);

    const getChartOptions = () => {
      return {
        series: productQuantityPercent,
        colors: ["#1C64F2", "#16BDCA", "#9061F9", "#9062F9", "#12BDCA", "#36BDCA"],
        chart: {
          height: 420,
          width: "100%",
          type: "pie",
        },
        stroke: {
          colors: ["white"],
          lineCap: "",
        },
        plotOptions: {
          pie: {
            labels: {
              show: true,
            },
            size: "100%",
            dataLabels: {
              offset: -25
            }
          },
        },
        labels: productNameList,
        dataLabels: {
          enabled: true,
          style: {
            fontFamily: "Inter, sans-serif",
          },
        },
        legend: {
          position: "bottom",
          fontFamily: "Inter, sans-serif",
        },
        yaxis: {
          labels: {
            formatter: function (value) {
              return value + "%"
            },
          },
        },
        xaxis: {
          labels: {
            formatter: function (value) {
              return value + "%"
            },
          },
          axisTicks: {
            show: false,
          },
          axisBorder: {
            show: false,
          },
        },
      }
    }

    if (chart.querySelector("#pie-chart") && typeof ApexCharts !== 'undefined') {
      const renderChart = new ApexCharts(chart.querySelector("#pie-chart"), getChartOptions());
      renderChart.render();
    }
  }

  async function renderLineChart(duration, chartId) {
    const curMonth = (new Date()).getMonth() + 1;
    const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const curDate = new Date();
    const dateInThePass = new Date(curDate);
    dateInThePass.setDate(curDate.getDate() - duration);



    let orders = (await GetData('/admin/statistic/getOrders')).data;
    orders = orders.map(x => {
      const orderDate = new Date(x.orderDate);
      orderDate.setHours(orderDate.getHours() + 7);
      x.orderDate = orderDate;
      return x;
    })
      .filter(x => {
        return x.orderDate < curDate && x.orderDate > dateInThePass;
      }).sort((a, b) => a.orderDate - b.orderDate);

    let revenues = [];
    let i = 0;
    const dateString = [];
    const tempDate = new Date(dateInThePass);
    while (tempDate < curDate) {
      if (i < orders.length && areDatesEqual(orders[i].orderDate, tempDate)) {
        revenues.push(orders[i].totalPrice);
        i++;
      } else {
        revenues.push(0);
      }


      dateString.push(formatDate(tempDate));
      tempDate.setDate(tempDate.getDate() + 1);
    }

    const chart = document.getElementById(chartId);
    chart.querySelector('#totalRevenue').innerHTML = `Total: ${revenues.reduce((total, x) => total += x, 0)} $`;


    // ApexCharts options and config
    let options = {
      // set the labels option to true to show the labels on the X and Y axis
      xaxis: {
        show: true,
        categories: dateString,
        labels: {
          show: true,
          style: {
            fontFamily: "Inter, sans-serif",
            cssClass: 'text-xs font-normal fill-gray-500 dark:fill-gray-400'
          }
        },
        axisBorder: {
          show: false,
        },
        axisTicks: {
          show: true,
        },
      },
      yaxis: {
        show: true,
        labels: {
          show: true,
          style: {
            fontFamily: "Inter, sans-serif",
            cssClass: 'text-xs font-normal fill-gray-500 dark:fill-gray-400'
          },
          formatter: function (value) {
            return value + ' $';
          }
        },
        axisTicks: {
          show: false,
        },
      },
      series: [
        {
          name: "Tổng doanh thu các mặt hàng",
          data: revenues,
          color: "#1A56DB",
        },

      ],
      chart: {
        sparkline: {
          enabled: false
        },
        height: "100%",
        width: "100%",
        type: "area",
        fontFamily: "Inter, sans-serif",
        dropShadow: {
          enabled: true,
        },
        toolbar: {
          show: true,
        },
      },
      tooltip: {
        enabled: true,
        x: {
          show: false,
        },
      },
      fill: {
        type: "gradient",
        gradient: {
          opacityFrom: 0.55,
          opacityTo: 0,
          shade: "#1C64F2",
          gradientToColors: ["#1C64F2"],
        },
      },
      dataLabels: {
        enabled: false,
      },
      stroke: {
        width: 4,
      },
      legend: {
        show: true
      },
      grid: {
        show: true,
      },
    }

    if (chart.querySelector("#labels-chart") && typeof ApexCharts !== 'undefined') {
      const renderChart = new ApexCharts(chart.querySelector("#labels-chart"), options);
      renderChart.render();
    }
  };

  async function GetData(url) {
    try {
      const response = await fetch(url, {
        method: "GET"
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const responseData = await response.json();

      return responseData;
    } catch (error) {
      console.log(error);
    }
  }
</script>



<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<div class="grid grid-cols-1 gap-4">
  <div class="col-span-1 bg-white rounded-lg shadow dark:bg-gray-800">
    <div class="flex justify-between p-4 md:p-6 pb-0 md:pb-0">
      <div>
        <h5 id="totalRevenue" class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2"></h5>
        <p class="text-base font-normal text-gray-500 dark:text-gray-400">Doanh thu gần đây</p>
      </div>

    </div>
    <div id="labels-chart" class="px-2.5"></div>
    <div
      class="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between mt-5 p-4 md:p-6 pt-0 md:pt-0">
      <div class="flex justify-between items-center pt-5">
        <!-- Button -->
        <button id="dropdownDefaultButton" data-dropdown-toggle="lastDaysdropdown" data-dropdown-placement="bottom"
          class="text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 text-center inline-flex items-center dark:hover:text-white"
          type="button">
          Last 7 days
          <svg class="w-2.5 m-2.5 ms-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
            viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="m1 1 4 4 4-4" />
          </svg>
        </button>
        <!-- Dropdown menu -->
        <div id="lastDaysdropdown"
          class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
          <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
            <li>
              <button data-number="1"
                class="block w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Yesterday</button>
            </li>
            <li>
              <button data-number="7"
                class="block w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 7
                days</button>
            </li>
            <li>
              <button data-number="30"
                class="block w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 30
                days</button>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>



</div>



<script>
  const formatDate = (date) => {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  };

  function areDatesEqual(date1, date2) {
    return (
      date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate()
    );
  }

  document.addEventListener('DOMContentLoaded', () => {
    const lastDayBtnsContainer = document.querySelector('#lastDaysdropdown');
    lastDayBtnsContainer.querySelectorAll('button').forEach(btn => {
      btn.addEventListener('click', () => {
        const num = parseInt(btn.getAttribute('data-number'));
        renderGraph(num);

      });
    })
  });

  (async function () {
    
    await renderGraph(7);
  })();

  async function renderGraph(duration) {
    const curMonth = (new Date()).getMonth() + 1;
    const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const curDate = new Date()//'01-05-2024');
    const dateInThePass = new Date(curDate);
    dateInThePass.setDate(curDate.getDate() - duration);



    let orders = (await GetData('/admin/statistic/getRevenue')).data;
    orders = orders.map(x => {
      const orderDate = new Date(x.orderDate);
      orderDate.setHours(orderDate.getHours() + 7);
      x.orderDate = orderDate;
      return x;
    })
      .filter(x => {
        return x.orderDate < curDate && x.orderDate > dateInThePass;
      }).sort((a, b) => a.orderDate - b.orderDate);;

    let revenues = [];
    let i = 0;
    const dateString = [];
    const tempDate = new Date(dateInThePass);
    while (tempDate < curDate) {
      if (i < orders.length && areDatesEqual(orders[i].orderDate, tempDate)) {
        revenues.push(orders[i].totalPrice);
        i++;
      } else {
        revenues.push(0);
      }


      dateString.push(formatDate(tempDate));
      tempDate.setDate(tempDate.getDate() + 1);
    }

    document.querySelector('#totalRevenue').innerHTML = `Total: ${revenues.reduce((total, x) => total += x)} VNĐ`;


    // ApexCharts options and config
    let options = {
      // set the labels option to true to show the labels on the X and Y axis
      xaxis: {
        show: true,
        categories: dateString,
        labels: {
          show: true,
          style: {
            fontFamily: "Inter, sans-serif",
            cssClass: 'text-xs font-normal fill-gray-500 dark:fill-gray-400'
          }
        },
        axisBorder: {
          show: false,
        },
        axisTicks: {
          show: true,
        },
      },
      yaxis: {
        show: true,
        labels: {
          show: true,
          style: {
            fontFamily: "Inter, sans-serif",
            cssClass: 'text-xs font-normal fill-gray-500 dark:fill-gray-400'
          },
          formatter: function (value) {
            return value + ' VNĐ';
          }
        },
        axisTicks: {
          show: false,
        },
      },
      series: [
        {
          name: "Developer Edition",
          data: revenues,
          color: "#1A56DB",
        },

      ],
      chart: {
        sparkline: {
          enabled: false
        },
        height: "100%",
        width: "100%",
        type: "area",
        fontFamily: "Inter, sans-serif",
        dropShadow: {
          enabled: true,
        },
        toolbar: {
          show: true,
        },
      },
      tooltip: {
        enabled: true,
        x: {
          show: false,
        },
      },
      fill: {
        type: "gradient",
        gradient: {
          opacityFrom: 0.55,
          opacityTo: 0,
          shade: "#1C64F2",
          gradientToColors: ["#1C64F2"],
        },
      },
      dataLabels: {
        enabled: false,
      },
      stroke: {
        width: 4,
      },
      legend: {
        show: true
      },
      grid: {
        show: true,
      },
    }

    if (document.getElementById("labels-chart") && typeof ApexCharts !== 'undefined') {
      const chart = new ApexCharts(document.getElementById("labels-chart"), options);
      chart.render();
    }
  };

  async function GetData(url) {
    try {
      const response = await fetch(url, {
        method: "GET"
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const responseData = await response.json();

      return responseData;
    } catch (error) {
      console.log(error);
    }
  }
</script>



<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
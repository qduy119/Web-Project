<div class="relative flex-[1_auto] flex flex-col break-words min-w-0 bg-clip-border rounded-[.95rem] bg-white m-5">
    <div
        class="relative flex flex-col min-w-0 break-words border border-dashed bg-clip-border rounded-2xl border-stone-200 bg-light/30">
        <!-- card header -->
        <div class="px-9 pt-5 flex justify-between items-stretch flex-wrap min-h-[70px] pb-0 bg-transparent">
            <h3 class="flex flex-col items-start justify-center m-2 ml-0 font-medium text-xl/tight text-dark">
                <span class="mr-3 font-semibold text-dark">Danh sách danh mục</span>
            </h3>
            <div class="relative flex flex-wrap items-center my-2">
                <a class="middle none center mr-4 rounded-lg bg-green-500 py-3 px-6 text-base font-bold uppercase text-white shadow-md shadow-green-500/20 transition-all hover:shadow-lg hover:shadow-green-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
                    data-ripple-light="true" href="/admin/category/create">
                    Thêm danh mục mới
                </a>
            </div>
        </div>
        <!-- end card header -->
        <!-- card body  -->
        <div class="flex-auto block py-8 pt-6 px-9">
            <div class="overflow-x-auto">
                <table class="w-full my-0 align-middle text-dark border-neutral-200">
                    <thead class="align-bottom">
                        <tr class="font-semibold text-[0.95rem] text-secondary-dark">
                            <th class="pb-3 text-start min-w-[30px]">ID</th>
                            <th class="pb-3 text-start min-w-[50px]">TÊN DANH MỤC</th>
                            <th class="pb-3 text-start min-w-[150px]">MÔ TẢ</th>
                            <th class="pb-3 text-start min-w-[70px]"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <% for(let i=0; i < pager.pageSize; i++) { %>
                            <tr class="border-b border-dashed last:border-b-0">
                                <td class="p-3 pr-0">
                                    <span class="font-semibold text-light-inverse text-lg/normal text-center">
                                        <%= list[i].id %>
                                    </span>
                                </td>
                                <td class="p-3 pl-0">
                                    <div class="flex items-center">
                                        <div class="relative inline-block shrink-0 rounded-2xl me-3">
                                            <img src="<%= list[i].thumbnail %>"
                                                class="w-[40px] h-[40px] inline-block shrink-0 rounded-2xl" alt="">
                                        </div>
                                        <div class="flex items-center">
                                            <span class="mb-1 font-semibold text-lg/normal text-secondary-inverse">
                                                <%= list[i].title %>
                                            </span>
                                        </div>
                                    </div>
                                </td>

                                <td class="p-3 pr-0 text-start">
                                    <span class="mb-1 font-semibold text-lg/normal text-secondary-inverse">
                                        <%= list[i].description %>
                                    </span>
                                </td>
                                <td class="p-3 pr-0 text-start">
                                    <button
                                        class="middle none relative h-10 max-h-[40px] w-10 max-w-[40px] rounded-lg bg-yellow-500 text-center font-sans text-xs font-medium uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
                                        type="button" data-ripple-light="true">
                                        <span
                                            class="absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 transform">
                                            <i class="fa-solid fa-pen-to-square text-lg"></i>
                                        </span>
                                    </button>

                                    <button onclick="deleteHandler(this)"
                                        class="delete-btn middle none relative h-10 max-h-[40px] w-10 max-w-[40px] rounded-lg bg-red-500 text-center font-sans text-xs font-medium uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
                                        type="button" data-ripple-light="true">
                                        <span
                                            class="absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 transform">
                                            <i class="fa-solid fa-trash text-lg"></i>
                                        </span>
                                    </button>
                                </td>
                            </tr>
                            <% } %>
                    </tbody>
                </table>

                <!-- component -->
                <nav aria-label="Page navigation">
                    <ul class="inline-flex space-x-2">
                        
                            <li><button disabled id="prevBtn"
                                    class="bg-gray-100 text-black flex items-center justify-center w-10 h-10 transition-colors duration-150 rounded-full focus:shadow-outline">
                                    <svg class="w-4 h-4 fill-current" viewBox="0 0 20 20">
                                        <path
                                            d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                                            clip-rule="evenodd" fill-rule="evenodd"></path>
                                    </svg></button>
                            </li>
                          
                                <% for(let i=1; i <=pager.pages; i++) { %>
                                    <% if (i==pager.curPage) {%>
                                        <li><button
                                                class="pageItem curPageItem w-10 h-10 text-white transition-colors duration-150 rounded-full focus:shadow-outline bg-indigo-600 border border-r-0 border-indigo-600">
                                                <%= i %>
                                            </button>
                                        </li>

                                        <% } else {%>
                                            <li><button
                                                    class="pageItem w-10 h-10 text-indigo-600 transition-colors duration-150 rounded-full focus:shadow-outline hover:bg-indigo-100">
                                                    <%= i %>
                                                </button>
                                            </li>
                                            <% } %>
                                                <% } %>
                                                   
                                                        <li><button id="nextBtn"
                                                                class="flex items-center justify-center w-10 h-10 text-indigo-600 transition-colors duration-150 rounded-full focus:shadow-outline hover:bg-indigo-100">
                                                                <svg class="w-4 h-4 fill-current" viewBox="0 0 20 20">
                                                                    <path
                                                                        d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                                                        clip-rule="evenodd" fill-rule="evenodd"></path>
                                                                </svg></button>
                                                        </li>
                                                      

                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>


<div style="margin: -13px"
    class="hidden min-w-screen h-screen animated fadeIn faster fixed left-0 top-0 flex justify-center items-center inset-0 z-50 outline-none focus:outline-none"
    id="modal-id">
    <div class="absolute bg-black opacity-10 inset-0 z-0"></div>
    <div class="w-full max-w-lg p-5 relative mx-auto my-auto rounded-xl shadow-lg bg-white ">
        <!--content-->
        <div class="">
            <!--body-->
            <div class="text-center p-5 flex-auto justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 -m-1 flex items-center text-red-500 mx-auto"
                    fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" class="w-16 h-16 flex items-center text-red-500 mx-auto"
                    viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                        clip-rule="evenodd" />
                </svg>
                <h2 class="text-xl font-bold py-4 ">Are you sure?</h3>
                    <p class="text-sm text-gray-500 px-8">Do you really want to delete this category?</p>
            </div>
            <!--footer-->
            <div class="p-3 mt-2 text-center space-x-4 md:block">
                <button id="cancelBtn"
                    class="mb-2 md:mb-0 bg-white px-5 py-2 text-sm shadow-sm font-medium tracking-wider border text-gray-600 rounded-full hover:shadow-lg hover:bg-gray-100">
                    Cancel
                </button>
                <button id="submitBtn"
                    class="mb-2 md:mb-0 bg-red-500 border border-red-500 px-5 py-2 text-sm shadow-sm font-medium tracking-wider text-white rounded-full hover:shadow-lg hover:bg-red-600">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>



<script>
    async function changePage(pageItem) {
        document.getElementsByClassName('curPageItem')[0].classList.remove('text-white');
                document.getElementsByClassName('curPageItem')[0].classList.remove('bg-indigo-600');
                document.getElementsByClassName('curPageItem')[0].classList.remove('border');
                document.getElementsByClassName('curPageItem')[0].classList.remove('border-r-0');
                document.getElementsByClassName('curPageItem')[0].classList.remove('border-indigo-600');
                document.getElementsByClassName('curPageItem')[0].classList.add('text-indigo-600');
                document.getElementsByClassName('curPageItem')[0].classList.add('hover:bg-indigo-100');
                document.getElementsByClassName('curPageItem')[0].classList.remove('curPageItem');

                pageItem.classList.remove('text-indigo-600');
                pageItem.classList.remove('hover:bg-indigo-100');
                pageItem.classList.add('text-white');
                pageItem.classList.add('bg-indigo-600');
                pageItem.classList.add('border');
                pageItem.classList.add('border-r-0');
                pageItem.classList.add('border-indigo-600');
                pageItem.classList.add('curPageItem');
                const tableBodyRows = document.querySelectorAll('table tbody tr');
                if (tableBodyRows.length < 5) {
                    for (let i = 0; i < 5 - tableBodyRows.length; i++) {
                        const trStr = `<tr class="border-b border-dashed last:border-b-0">
            <td class="p-3 pr-0"></td>
            <td class="p-3 pl-0"></td>
            <td class="p-3 pr-0 text-start"></td>
            <td class="p-3 pr-0 text-start">
                <button class="middle none relative h-10 max-h-[40px] w-10 max-w-[40px] rounded-lg bg-yellow-500 text-center font-sans text-xs font-medium uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none" type="button" data-ripple-light="true">
                    <span class="absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 transform">
                        <i class="fa-solid fa-pen-to-square text-lg"></i>
                    </span>
                </button>
                <button onclick="deleteHandler(this)"
                                        class="delete-btn middle none relative h-10 max-h-[40px] w-10 max-w-[40px] rounded-lg bg-red-500 text-center font-sans text-xs font-medium uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
                                        type="button" data-ripple-light="true">
                                        <span
                                            class="absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 transform">
                                            <i class="fa-solid fa-trash text-lg"></i>
                                        </span>
                                    </button>
            </td>
        </tr>`;


                        document.querySelector('table tbody').insertAdjacentHTML('beforeend', trStr);
                    }


                }

                const data = {
                    page: parseInt(pageItem.innerHTML)
                };
                // check if previous and next button should be enabled or not
                if (data.page != 1) {
                    document.querySelector('#prevBtn').classList.add('text-indigo-600');
                    document.querySelector('#prevBtn').classList.add('hover:bg-indigo-100');
                    document.querySelector('#prevBtn').classList.remove('bg-gray-100');
                    document.querySelector('#prevBtn').classList.remove('text-black');
                    document.querySelector('#prevBtn').removeAttribute('disabled');
                } else {
                    document.querySelector('#prevBtn').classList.remove('text-indigo-600');
                    document.querySelector('#prevBtn').classList.remove('hover:bg-indigo-100');
                    document.querySelector('#prevBtn').classList.add('bg-gray-100');
                    document.querySelector('#prevBtn').classList.add('text-black');
                    document.querySelector('#prevBtn').setAttribute('disabled', true);
                }

                const numOfPages = parseInt('<%= pager.pages %>');
                if (data.page != numOfPages) {
                    document.querySelector('#nextBtn').classList.add('text-indigo-600');
                    document.querySelector('#nextBtn').classList.add('hover:bg-indigo-100');
                    document.querySelector('#nextBtn').classList.remove('bg-gray-100');
                    document.querySelector('#nextBtn').classList.remove('text-black');
                    document.querySelector('#nextBtn').removeAttribute('disabled');
                } else {
                    document.querySelector('#nextBtn').classList.remove('text-indigo-600');
                    document.querySelector('#nextBtn').classList.remove('hover:bg-indigo-100');
                    document.querySelector('#nextBtn').classList.add('bg-gray-100');
                    document.querySelector('#nextBtn').classList.add('text-black');
                    document.querySelector('#nextBtn').setAttribute('disabled', true);
                }

                // Update the data in the table
                const responseData = await PostData('/admin/category/getEntity', data);
                const tableRows = document.querySelectorAll('table tbody tr');
                for (let i = 0; i < responseData.data.length; i++) {

                    const cols = tableRows[i].querySelectorAll('td');

                    cols[0].innerHTML = `<span class="font-semibold text-light-inverse text-lg/normal text-center">
                  ${responseData.data[i].id}
                </span>`;
                    cols[1].innerHTML = `<div class="flex items-center">
                  <div class="relative inline-block shrink-0 rounded-2xl me-3">
                    <img src="${responseData.data[i].thumbnail}" class="w-[40px] h-[40px] inline-block shrink-0 rounded-2xl" alt="">
                  </div>
                  <div class="flex items-center">
                    <span class="mb-1 font-semibold text-lg/normal text-secondary-inverse">
                      ${responseData.data[i].title}
                    </span>
                  </div>
                </div>`;

                    cols[2].innerHTML = `<span class="mb-1 font-semibold text-lg/normal text-secondary-inverse">
                  ${responseData.data[i].description}
                </span>`;
                }
               
    }
    document.addEventListener('DOMContentLoaded', () => {
        const pageItems = [...document.getElementsByClassName('pageItem')];
        pageItems.forEach(pageItem => {
            pageItem.addEventListener('click', async (e) => {
                

                changePage(e.target);
                
            });
        });

        document.querySelector('#prevBtn').addEventListener('click', () => {
            const curPageItem = document.getElementsByClassName('curPageItem')[0];
            const curPageIndex = Array.from(curPageItem.parentElement.parentElement.children).indexOf(curPageItem.parentElement);
            const pageItem = curPageItem.parentElement.parentElement.children[curPageIndex - 1].querySelector('.pageItem');
            changePage(pageItem);
        });

        document.querySelector('#nextBtn').addEventListener('click', () => {
            const curPageItem = document.getElementsByClassName('curPageItem')[0];
            const curPageIndex = Array.from(curPageItem.parentElement.parentElement.children).indexOf(curPageItem.parentElement);
            const pageItem = curPageItem.parentElement.parentElement.children[curPageIndex + 1].querySelector('.pageItem');
            changePage(pageItem);
        });
    });


    async function PostData(url, data) {
        try {
            const response = await fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const responseData = await response.json();

            return responseData;
        } catch (error) {
            console.log(error);
        }
    }

    // Delete button
    function deleteHandler(btn) {
        const closestRow = btn.closest('tr');
        const modal = document.getElementById('modal-id');
        modal.classList.remove('hidden');
        const cancelBtn = modal.querySelector('#cancelBtn');
        cancelBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
        });
        const submitBtn = modal.querySelector('#submitBtn');
        submitBtn.addEventListener('click', () => {

            const id = parseInt(closestRow.querySelectorAll('td')[0].querySelector('span').innerText);

            closestRow.parentNode.removeChild(closestRow);

            PostData('/admin/category/delete', {
                id: id
            });

            modal.classList.add('hidden');
        });
    }
</script>